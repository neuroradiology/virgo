// Code generated by golex. DO NOT EDIT.

package parser

import (
	"fmt"
)

func (l *lexer) Lex(lval *yySymType) int {
	const (
		S_INIT = iota
		S_COMMENTS
	)

	c := l.current
	currentState := 0

	if l.empty {
		c, l.empty = l.getc(), false
	}

yystate0:

	l.buf.Reset()

	switch yyt := currentState; yyt {
	default:
		panic(fmt.Errorf(`invalid start condition %d`, yyt))
	case 0: // start condition: INITIAL
		goto yystart1
	case 1: // start condition: S_COMMENTS
		goto yystart24
	}

	goto yystate0 // silence unused label error
	goto yystate1 // silence unused label error
yystate1:
	c = l.getc()
yystart1:
	switch {
	default:
		goto yyabort
	case c == '"':
		goto yystate5
	case c == '#':
		goto yystate8
	case c == ',':
		goto yystate9
	case c == '-':
		goto yystate10
	case c == '/':
		goto yystate13
	case c == ':' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z':
		goto yystate17
	case c == '<':
		goto yystate18
	case c == '=':
		goto yystate20
	case c == '\n' || c == '\r':
		goto yystate4
	case c == '\t' || c == ' ':
		goto yystate3
	case c == '\x00':
		goto yystate2
	case c == '`':
		goto yystate21
	case c == '|':
		goto yystate23
	}

yystate2:
	c = l.getc()
	goto yyrule14

yystate3:
	c = l.getc()
	goto yyrule5

yystate4:
	c = l.getc()
	goto yyrule13

yystate5:
	c = l.getc()
	switch {
	default:
		goto yyabort
	case c == ':' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z':
		goto yystate6
	}

yystate6:
	c = l.getc()
	switch {
	default:
		goto yyabort
	case c == '"':
		goto yystate7
	case c == '\t' || c == ' ' || c >= '0' && c <= ':' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z':
		goto yystate6
	}

yystate7:
	c = l.getc()
	goto yyrule16

yystate8:
	c = l.getc()
	goto yyrule12

yystate9:
	c = l.getc()
	goto yyrule10

yystate10:
	c = l.getc()
	switch {
	default:
		goto yyabort
	case c == '-':
		goto yystate11
	case c == '>':
		goto yystate12
	}

yystate11:
	c = l.getc()
	goto yyrule9

yystate12:
	c = l.getc()
	goto yyrule7

yystate13:
	c = l.getc()
	switch {
	default:
		goto yyabort
	case c == '*':
		goto yystate14
	case c == '/':
		goto yystate15
	}

yystate14:
	c = l.getc()
	goto yyrule2

yystate15:
	c = l.getc()
	switch {
	default:
		goto yyabort
	case c == '\n':
		goto yystate16
	case c >= '\x01' && c <= '\t' || c == '\v' || c == '\f' || c >= '\x0e' && c <= 'ÿ':
		goto yystate15
	}

yystate16:
	c = l.getc()
	goto yyrule1

yystate17:
	c = l.getc()
	switch {
	default:
		goto yyrule15
	case c >= '0' && c <= ':' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z':
		goto yystate17
	}

yystate18:
	c = l.getc()
	switch {
	default:
		goto yyabort
	case c == '-':
		goto yystate19
	}

yystate19:
	c = l.getc()
	goto yyrule8

yystate20:
	c = l.getc()
	goto yyrule11

yystate21:
	c = l.getc()
	switch {
	default:
		goto yyabort
	case c == '`':
		goto yystate22
	case c >= '\x01' && c <= '_' || c >= 'a' && c <= 'ÿ':
		goto yystate21
	}

yystate22:
	c = l.getc()
	goto yyrule17

yystate23:
	c = l.getc()
	switch {
	default:
		goto yyrule6
	case c == '\t' || c == '\n' || c == ' ':
		goto yystate23
	}

	goto yystate24 // silence unused label error
yystate24:
	c = l.getc()
yystart24:
	switch {
	default:
		goto yyabort
	case c == '*':
		goto yystate26
	case c >= '\x01' && c <= ')' || c >= '+' && c <= 'ÿ':
		goto yystate25
	}

yystate25:
	c = l.getc()
	goto yyrule4

yystate26:
	c = l.getc()
	switch {
	default:
		goto yyrule4
	case c == '/':
		goto yystate27
	}

yystate27:
	c = l.getc()
	goto yyrule3

yyrule1: // \/\/[^\r\n]*\n
	{
		/* single-line comments */
		goto yystate0
	}
yyrule2: // "/*"
	{
		currentState = S_COMMENTS
		goto yystate0
	}
yyrule3: // "*/"
	{
		currentState = S_INIT
		goto yystate0
	}
yyrule4: // .|\n
	{
		/* ignore chars within multi-line comments */
		goto yystate0
	}
yyrule5: // [\t ]
	{
		/* whitespace */
		goto yystate0
	}
yyrule6: // \|[\t \n]*

	goto yystate0
yyrule7: // \->
	{
		lval.str = l.token()
		return RE_OP
		goto yystate0
	}
yyrule8: // \<\-
	{
		lval.str = l.token()
		return LE_OP
		goto yystate0
	}
yyrule9: // \-\-
	{
		lval.str = l.token()
		return UE_OP
		goto yystate0
	}
yyrule10: // ,
	{
		lval.str = l.token()
		return COMMA
		goto yystate0
	}
yyrule11: // =
	{
		lval.str = l.token()
		return EQ
		goto yystate0
	}
yyrule12: // #
	{
		lval.str = l.token()
		return HASH
		goto yystate0
	}
yyrule13: // [\n\r]
	{
		return NEWLINE
	}
yyrule14: // \0
	{
		return EOF
	}
yyrule15: // {L}({L}|{D})*
	{
		lval.str = l.token()
		return STRING
		goto yystate0
	}
yyrule16: // \"{L}({L}|{D}|[\t ])*\"
	{
		lval.str = l.token()[1 : len(l.token())-1]
		return QSTRING
		goto yystate0
	}
yyrule17: // `[^`]*`
	{
		lval.str = l.token()[1 : len(l.token())-1]
		return BTICKSTR
		goto yystate0
	}
	panic("unreachable")

	goto yyabort // silence unused label error

yyabort: // no lexem recognized

	l.empty = true
	return int(c)
}
